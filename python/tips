
* Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries
* dictionary keys must be immutable in Python.
* Tuples are written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable
* Python has array index and array slicing expressions on lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end.
* Slice indexes may be omitted, for example a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.
* For tie-breaking, versions before 3 use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is âˆ’1.0.[76] Python 3 uses round to even: round(1.5) is 2, round(2.5) is 2
* The behavior of division has changed significantly over time:[74]

    Python 2.1 and earlier use the C division behavior. The / operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. 7 / 3 == 2 and -7 / 3 == -2.
    Python 2.2 changes integer division to round towards negative infinity, e.g. 7 / 3 == 2 and -7 / 3 == -3. The floor division // operator is introduced. So 7 // 3 == 2, -7 // 3 == -3, 7.5 // 3 == 2.0 and -7.5 // 3 == -3.0. Adding from __future__ import division causes a module to use Python 3.0 rules for division (see next).
    Python 3.0 changes / to be always floating-point division. In Python terms, the pre-3.0 / is classic division, the version-3.0 / is real division, and // is floor division.

Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a+b) // b == a // b + 1 is always true. It also means that the equation b * (a // b) + a % b == a is valid for both positive and negative values of a.

* Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c

* A global name can not be changed to refer a different value in a local scope without declaring it specifically as global regardless whether the value is mutable or immutable.
* Global mutable values can be changed in local scope by using a name or reference to the value without declaring the name as global.
* You can create dict from a list of tuples.
* deepcopy can not copy the class itself. use this: CopyOfB = type('CopyOfB', B.__bases__, dict(B.__dict__))
